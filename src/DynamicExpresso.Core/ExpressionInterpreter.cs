using DynamicExpresso.Parsing;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using DynamicExpresso.Reflection;

namespace DynamicExpresso
{
	/// <summary>
	/// Class used to parse and compile a text expression into an Expression or a Delegate that can be invoked. Expression are written using a subset of C# syntax.
	/// Only get properties, Parse and Eval methods are thread safe.
	/// </summary>
	public class ExpressionInterpreter
	{
		private readonly InterpreterSettings _settings;

		#region Constructors

		/// <summary>
		/// Creates a new ExpressionInterpreter using InterpreterOptions.Default.
		/// </summary>
		public ExpressionInterpreter() : this(InterpreterOptions.Default)
		{
		}

		/// <summary>
		/// Creates a new ExpressionInterpreter using the specified options.
		/// </summary>
		/// <param name="options"></param>
		public ExpressionInterpreter(InterpreterOptions options)
		{
			_settings = new InterpreterSettings(options);
		}

		/// <summary>
		/// Create a new ExpressionInterpreter with the settings copied from another interpreter
		/// </summary>
		internal ExpressionInterpreter(ParserSettings settings)
		{
			_settings = new InterpreterSettings(settings);
		}

		#endregion

		#region Properties

		public bool CaseInsensitive { get { return _settings.CaseInsensitive; } }

		/// <summary>
		/// Gets a list of registeres types. Add types by using the Reference method.
		/// </summary>
		public IEnumerable<ReferenceType> ReferencedTypes { get { return _settings.ReferencedTypes; } }

		/// <summary>
		/// Gets a list of known identifiers. Add identifiers using SetVariable, SetFunction or SetExpression methods.
		/// </summary>
		public IEnumerable<Identifier> Identifiers { get { return _settings.Identifiers; } }

		/// <summary>
		/// Gets the available assignment operators.
		/// </summary>
		public AssignmentOperators AssignmentOperators { get { return _settings.AssignmentOperators; } }

		#endregion

		#region Options

		/// <summary>
		/// Allow to set de default numeric type when no suffix is specified (Int by default, Double if real number)
		/// </summary>
		/// <param name="defaultNumberType"></param>
		/// <returns></returns>
		public ExpressionInterpreter SetDefaultNumberType(DefaultNumberType defaultNumberType)
		{
			_settings.SetDefaultNumberType(defaultNumberType);
			return this;
		}

		/// <summary>
		/// Allows to enable/disable assignment operators.
		/// For security when expression are generated by the users is more safe to disable assignment operators.
		/// </summary>
		/// <param name="assignmentOperators"></param>
		/// <returns></returns>
		public ExpressionInterpreter EnableAssignment(AssignmentOperators assignmentOperators)
		{
			_settings.EnableAssignment(assignmentOperators);
			return this;
		}

		#endregion

		#region Visitors

		public ISet<ExpressionVisitor> Visitors { get { return _settings.Visitors; } }

		/// <summary>
		/// Enable reflection expression (like x.GetType().GetMethod() or typeof(double).Assembly) by removing the DisableReflectionVisitor.
		/// </summary>
		/// <returns></returns>
		public ExpressionInterpreter EnableReflection()
		{
			_settings.EnableReflection();
			return this;
		}

		#endregion

		#region Register identifiers

		/// <summary>
		/// Allow the specified function delegate to be called from a parsed expression.
		/// </summary>
		/// <param name="name"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		public ExpressionInterpreter SetFunction(string name, Delegate value)
		{
			_settings.SetFunction(name, value);
			return this;
		}

		/// <summary>
		/// Allow the specified variable to be used in a parsed expression.
		/// </summary>
		/// <param name="name"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		public ExpressionInterpreter SetVariable(string name, object value)
		{
			_settings.SetVariable(name, value);
			return this;
		}

		/// <summary>
		/// Allow the specified variable to be used in a parsed expression.
		/// </summary>
		/// <param name="name"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		public ExpressionInterpreter SetVariable<T>(string name, T value)
		{
			_settings.SetVariable(name, value);
			return this;
		}

		/// <summary>
		/// Allow the specified variable to be used in a parsed expression.
		/// </summary>
		/// <param name="name"></param>
		/// <param name="value"></param>
		/// <param name="type"></param>
		/// <returns></returns>
		public ExpressionInterpreter SetVariable(string name, object value, Type type)
		{
			_settings.SetVariable(name, value, type);
			return this;
		}

		/// <summary>
		/// Allow the specified Expression to be used in a parsed expression.
		/// Basically add the specified expression as a known identifier.
		/// </summary>
		/// <param name="name"></param>
		/// <param name="expression"></param>
		/// <returns></returns>
		public ExpressionInterpreter SetExpression(string name, Expression expression)
		{
			_settings.SetVariable(name, expression);
			return this;
		}

		/// <summary>
		/// Allow the specified list of identifiers to be used in a parsed expression.
		/// Basically add the specified expressions as a known identifier.
		/// </summary>
		/// <param name="identifiers"></param>
		/// <returns></returns>
		public ExpressionInterpreter SetIdentifiers(IEnumerable<Identifier> identifiers)
		{
			_settings.SetIdentifiers(identifiers);
			return this;
		}

		/// <summary>
		/// Allow the specified identifier to be used in a parsed expression.
		/// Basically add the specified expression as a known identifier.
		/// </summary>
		/// <param name="identifier"></param>
		/// <returns></returns>
		public ExpressionInterpreter SetIdentifier(Identifier identifier)
		{
			_settings.SetIdentifier(identifier);
			return this;
		}

		#endregion

		#region Parse

		public ParseResult<TDelegate> Parse<TDelegate>(string expressionText, params string[] parametersNames)
		{
			var delegateInfo = ReflectionExtensions.GetDelegateInfo(typeof(TDelegate), parametersNames);
			var parseResult = Parse(
				expressionText,
				delegateInfo.ReturnType,
				delegateInfo.Parameters.Select(x => x.Expression).ToArray());

			return new ParseResult<TDelegate>(
				expression: parseResult.Expression,
				usedParameters: parseResult.UsedParameters,
				declaredParameters: parseResult.DeclaredParameters,
				types: parseResult.Types,
				identifiers: parseResult.Identifiers);
		}

		public ParseResult Parse(string expressionText, params ParameterExpression[] parameters)
		{
			return Parse(expressionText, typeof(void), parameters);
		}

		public ParseResult Parse(string expressionText, Type expressionReturnType, params ParameterExpression[] parameters)
		{
			if (parameters == null)
				parameters = new ParameterExpression[0];

			var arguments = new ParserArguments(
				expressionText,
				_settings.ParserSettings,
				expressionReturnType,
				parameters.Select(x => new Parameter(x)));

			var expression = _settings.Visitors.Aggregate(Parser.Parse(arguments), (current, visitor) => visitor.Visit(current));

			var lambda = new ParseResult(
				expression: expression,
				usedParameters: arguments.UsedParameters.Select(x => x.Expression),
				declaredParameters: arguments.DeclaredParameters.Select(x => x.Expression),
				types: arguments.UsedTypes,
				identifiers: arguments.UsedIdentifiers);

#if TEST_DetectIdentifiers
			AssertDetectIdentifiers(lambda);
#endif

			return lambda;
		}

		#endregion

		#region Detection

		public IdentifiersInfo DetectIdentifiers(string expression)
		{
			var detector = new Detector(_settings.ParserSettings);

			return detector.DetectIdentifiers(expression);
		}

		#endregion

		#region Private methods

#if TEST_DetectIdentifiers
		private void AssertDetectIdentifiers(Lambda lambda)
		{
			var info = DetectIdentifiers(lambda.ExpressionText);

			if (info.Identifiers.Count() != lambda.Identifiers.Count())
				throw new Exception("Detected identifiers doesn't match actual identifiers");
			if (info.Types.Count() != lambda.Types.Count())
				throw new Exception("Detected types doesn't match actual types");
			if (info.UnknownIdentifiers.Count() != lambda.UsedParameters.Count())
				throw new Exception("Detected unknown identifiers doesn't match actual parameters");
		}
#endif
		#endregion
	}
}
